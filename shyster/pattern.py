# AUTOGENERATED! DO NOT EDIT! File to edit: ../01_pattern.ipynb.

# %% auto 0
__all__ = ['convert_patterns', 'convert_exceptions']

# %% ../01_pattern.ipynb 3
def _cvt(pattern):
    res = [0 for _ in pattern]
    pos = 0
    for ch in pattern:
        if ch in string.digits:
            res[pos] = int(ch)
        else:
            pos += 1
    return tuple(res[:pos+1])

# %% ../01_pattern.ipynb 4
def convert_patterns(patterns):
    regexes = []
    mapping = {}
    for p in patterns:
        # replace dot with a control character unlikely to appear in words (ASCII unit separator)
        p = p.replace('.', '\x1f')
        s = re.sub('[0-9]', '', p)
        regexes.append(s)
        mapping[s] = _cvt(p)
    return re.compile(f"(?=({'|'.join(regexes)}))"), mapping

# %% ../01_pattern.ipynb 6
def convert_exceptions(exceptions):
    return {w.replace('-', ''): w for w in exceptions}
